// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runner.proto

package sidecar

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunRequest struct {
	ChaincodePath        string   `protobuf:"bytes,1,opt,name=chaincode_path,json=chaincodePath,proto3" json:"chaincode_path,omitempty"`
	MetadataPath         string   `protobuf:"bytes,2,opt,name=metadata_path,json=metadataPath,proto3" json:"metadata_path,omitempty"`
	ArtifactsPath        string   `protobuf:"bytes,3,opt,name=artifacts_path,json=artifactsPath,proto3" json:"artifacts_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48eceea7e2abc593, []int{0}
}

func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (m *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(m, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetChaincodePath() string {
	if m != nil {
		return m.ChaincodePath
	}
	return ""
}

func (m *RunRequest) GetMetadataPath() string {
	if m != nil {
		return m.MetadataPath
	}
	return ""
}

func (m *RunRequest) GetArtifactsPath() string {
	if m != nil {
		return m.ArtifactsPath
	}
	return ""
}

type RunResponse struct {
	// Types that are valid to be assigned to Message:
	//	*RunResponse_StandardOut
	//	*RunResponse_StandardError
	Message              isRunResponse_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48eceea7e2abc593, []int{1}
}

func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResponse.Unmarshal(m, b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
}
func (m *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(m, src)
}
func (m *RunResponse) XXX_Size() int {
	return xxx_messageInfo_RunResponse.Size(m)
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

type isRunResponse_Message interface {
	isRunResponse_Message()
}

type RunResponse_StandardOut struct {
	StandardOut string `protobuf:"bytes,1,opt,name=standard_out,json=standardOut,proto3,oneof"`
}

type RunResponse_StandardError struct {
	StandardError string `protobuf:"bytes,2,opt,name=standard_error,json=standardError,proto3,oneof"`
}

func (*RunResponse_StandardOut) isRunResponse_Message() {}

func (*RunResponse_StandardError) isRunResponse_Message() {}

func (m *RunResponse) GetMessage() isRunResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RunResponse) GetStandardOut() string {
	if x, ok := m.GetMessage().(*RunResponse_StandardOut); ok {
		return x.StandardOut
	}
	return ""
}

func (m *RunResponse) GetStandardError() string {
	if x, ok := m.GetMessage().(*RunResponse_StandardError); ok {
		return x.StandardError
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RunResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RunResponse_StandardOut)(nil),
		(*RunResponse_StandardError)(nil),
	}
}

func init() {
	proto.RegisterType((*RunRequest)(nil), "sidecar.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "sidecar.RunResponse")
}

func init() { proto.RegisterFile("runner.proto", fileDescriptor_48eceea7e2abc593) }

var fileDescriptor_48eceea7e2abc593 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x46, 0x1b, 0x0b, 0x2d, 0x9d, 0x26, 0x39, 0xac, 0x1e, 0xc4, 0x93, 0xb4, 0x14, 0x3d, 0x05,
	0xa9, 0x57, 0x4f, 0x82, 0xd0, 0x9b, 0xb2, 0x7f, 0xa0, 0x8c, 0xbb, 0x53, 0x93, 0x43, 0x77, 0xe3,
	0xec, 0xec, 0xd9, 0xbf, 0x2e, 0xd9, 0x35, 0x91, 0x5e, 0x1f, 0x8f, 0x99, 0x8f, 0x07, 0x25, 0x47,
	0xe7, 0x88, 0x9b, 0x9e, 0xbd, 0x78, 0xb5, 0x0c, 0x9d, 0x25, 0x83, 0xbc, 0xf9, 0x01, 0xd0, 0xd1,
	0x69, 0xfa, 0x8e, 0x14, 0x44, 0xed, 0xa0, 0x36, 0x2d, 0x76, 0xce, 0x78, 0x4b, 0xc7, 0x1e, 0xa5,
	0xbd, 0x2d, 0xee, 0x8b, 0xc7, 0x95, 0xae, 0x26, 0xfa, 0x81, 0xd2, 0xaa, 0x2d, 0x54, 0x67, 0x12,
	0xb4, 0x28, 0x98, 0xad, 0xab, 0x64, 0x95, 0x23, 0x4c, 0xd2, 0x0e, 0x6a, 0x64, 0xe9, 0x4e, 0x68,
	0x24, 0x64, 0x6b, 0x9e, 0x6f, 0x4d, 0x74, 0xd0, 0x36, 0x27, 0x58, 0xa7, 0x01, 0xa1, 0xf7, 0x2e,
	0x90, 0xda, 0x42, 0x19, 0x04, 0x9d, 0x45, 0xb6, 0x47, 0x1f, 0x25, 0xff, 0x3f, 0xcc, 0xf4, 0x7a,
	0xa4, 0xef, 0x51, 0xd4, 0x03, 0xd4, 0x93, 0x44, 0xcc, 0x9e, 0xf3, 0x80, 0xc3, 0x4c, 0x57, 0x23,
	0x7f, 0x1b, 0xf0, 0xeb, 0x0a, 0x96, 0x67, 0x0a, 0x01, 0xbf, 0x68, 0xff, 0x02, 0x0b, 0x9d, 0x0a,
	0xa8, 0x3d, 0xcc, 0x75, 0x74, 0xea, 0xba, 0xf9, 0x6b, 0xd0, 0xfc, 0x07, 0xb8, 0xbb, 0xb9, 0x84,
	0x79, 0xd4, 0x53, 0xf1, 0xb9, 0x48, 0xd9, 0x9e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x07,
	0x59, 0xdc, 0x46, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Runner_RunClient, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Runner_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runner_serviceDesc.Streams[0], "/sidecar.Runner/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runner_RunClient interface {
	Recv() (*RunResponse, error)
	grpc.ClientStream
}

type runnerRunClient struct {
	grpc.ClientStream
}

func (x *runnerRunClient) Recv() (*RunResponse, error) {
	m := new(RunResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunnerServer is the server API for Runner service.
type RunnerServer interface {
	Run(*RunRequest, Runner_RunServer) error
}

// UnimplementedRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (*UnimplementedRunnerServer) Run(req *RunRequest, srv Runner_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServer).Run(m, &runnerRunServer{stream})
}

type Runner_RunServer interface {
	Send(*RunResponse) error
	grpc.ServerStream
}

type runnerRunServer struct {
	grpc.ServerStream
}

func (x *runnerRunServer) Send(m *RunResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sidecar.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Runner_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runner.proto",
}
